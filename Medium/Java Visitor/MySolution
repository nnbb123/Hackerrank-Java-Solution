import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    public int getResult() {
        return sum;
    }
    int sum = 0;
    public void visitNode(TreeNode node) {

    }

    public void visitLeaf(TreeLeaf leaf) {
            sum += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    public int getResult() {
        return (int)product;
    }
    long product = 1L;
    final int M = (int)(Math.pow(10,9)+7);
    void multiply(Tree t){
        int v= t.getValue();
        if(v != 0) product =(product*v) % M;
    }
    public void visitNode(TreeNode node) {
        //int v = node.getValue();
      	if(node.getColor() == Color.RED) 
            //productN = ((productN%M)*(v%M)) % M;
            multiply(node);
    }

    public void visitLeaf(TreeLeaf leaf) {
        // int v = leaf.getValue();
      	if(leaf.getColor() == Color.RED) 
           // productL = ((productL%M)*(v%M)) % M;
           multiply(leaf);
    }
}

class FancyVisitor extends TreeVis {
    public int getResult() {
      	//implement this
        return Math.abs(evennode - greenleaf);
    }
    
    int  evennode = 0 , greenleaf = 0;
    
    public void visitNode(TreeNode node) {
    	evennode += (node.getDepth() % 2 == 0  || node.getDepth() == 0)? node.getValue() : 0;
    }

    public void visitLeaf(TreeLeaf leaf) {
    	greenleaf += (leaf.getColor() == Color.GREEN)? leaf.getValue() : 0; 
    }
    
}

public class Solution {
    static class Edge{
        int x;
        int y;
        Edge(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    static BitSet getLeafs(LinkedList<Edge> es){
        
        int l = es.size();
        BitSet s1 = new BitSet(2*l), s2 = new BitSet();
        int x, y;
        for (int i=0; i<l; i++){
            x = es.get(i).x;
            y = es.get(i).y;
            if(s1.get(x)) s2.set(x);
            else s1.set(x);
            if(s1.get(y)) s2.set(y);
            else s1.set(y);
        }
        s1.andNot(s2);
        return s1;
    }
  
    /*static void createCnode(LinkedList ll,int p, TreeNode pa, BitSet ls, int[] vs, Color[] cs){
        ArrayList<Integer> ops = new ArrayList<>();
        Iterator it = ll.iterator();
        while(it.hasNext()){
            Edge e = (Edge)it.next();
            if(e.x == p) {
                ops.add(e.y);
                it.remove();
            }
            else if(e.y == p) {
                ops.add(e.x);
                it.remove();
            }
        }
        for(int i=0; i<ops.size(); i++){
            int c = ops.get(i);
            if(ls.get(c)) {
                TreeLeaf leaf = new TreeLeaf(vs[c], cs[c], pa.getDepth() + 1);
                pa.addChild(leaf);
            } 
            else {
                TreeNode node = new TreeNode(vs[c], cs[c], pa.getDepth() + 1);
                pa.addChild(node);
                
                createCnode(ll, c, node, ls, vs, cs);
            }
        }
        
    }*/

    static void create(LinkedList<Edge> ll,BitSet created, Tree[] tree, BitSet ls, int[] vs, Color[] cs){
        if(!ll.isEmpty()) {
            Iterator it = ll.iterator();
            while(it.hasNext()) {
                Edge e = (Edge)it.next();
                int c = -1, p = 0;
                
                if(created.get(e.x)) {
                    p = e.x;
                    c = e.y;
                }
                else if(created.get(e.y)) {
                    p = e.y;
                    c = e.x;
                }
                if(c > 0) {
                    created.set(c);                    
                    it.remove();
                    TreeNode pa = (TreeNode) tree[p];
                    if(ls.get(c)) {
                        TreeLeaf leaf = new TreeLeaf(vs[c], cs[c], pa.getDepth() + 1);
                        pa.addChild(leaf);
                        //tree.add(c, leaf);
                        tree[c] =leaf;
                    } 
                    else {
                        TreeNode node = new TreeNode(vs[c], cs[c], pa.getDepth() + 1);
                        pa.addChild(node);
                        //tree.add(c, node);
                        tree[c] =node;
                    }
                }//System.out.println(tree);
            }
            create(ll, created, tree ,ls , vs, cs);
        }
    }

    public static Tree solve() {
        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] values = new int[n];
        Color[] colors = new Color[n];

        for(int i=0; i<n; i++){
            values[i] = scan.nextInt();
        }
        for(int i=0; i<n; i++){
            colors[i] = (scan.nextInt() == 0)? Color.RED : Color.GREEN;
        }
        // Two array of value and color

        Tree[] trees = new Tree[n];
        Tree root;
        if (n==1) root = new TreeLeaf(values[0], colors[0], 0);
        else { 
            root = new TreeNode(values[0], colors[0], 0);
            //trees.add(root);
            trees[0] = root;
        // Add root to a tree

            LinkedList<Edge> es = new LinkedList<>();
            for(int i=1; i<n; i++){
                es.addLast(new Edge(scan.nextInt() - 1, scan.nextInt() - 1 ) );
            }                   
            BitSet leafs = getLeafs(es);          
            
            //createCnode(es, 0, (TreeNode)root, leafs, values, colors);
            BitSet cted = new BitSet(n);
            cted.set(0);
            create(es, cted, trees, leafs, values, colors);
    
        /*create ll edges by scan, getLeafs() from ll,
        each edge take parent create chld add child remove edge
        if child is node do again/*/

        }
        scan.close();
        return root;
    }


    public static void main(String[] args) {
      	Tree root = solve();
		SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
      	ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
      	FancyVisitor vis3 = new FancyVisitor();

      	root.accept(vis1);
      	root.accept(vis2);
      	root.accept(vis3);

      	int res1 = vis1.getResult();
      	int res2 = vis2.getResult();
      	int res3 = vis3.getResult();

      	System.out.println(res1);
     	System.out.println(res2);
    	System.out.println(res3);
	}
}
