import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    public int getResult() {
        return sum;
    }
    private int sum = 0;
    public void visitNode(TreeNode node) {

    }

    public void visitLeaf(TreeLeaf leaf) {
            sum += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    public int getResult() {
        return (int)product;
    }
    private long product = 1L;
    final int M = (int)(Math.pow(10,9)+7);
    void multiply(Tree t){
        int v= t.getValue();
        if(v != 0) product =(product*v) % M;
    }
    public void visitNode(TreeNode node) {
      	if(node.getColor() == Color.RED) 
            multiply(node);
    }

    public void visitLeaf(TreeLeaf leaf) {
      	if(leaf.getColor() == Color.RED) 
           multiply(leaf);
    }
}

class FancyVisitor extends TreeVis {
    public int getResult() {
        return Math.abs(evennode - greenleaf);
    }
    
     private int  evennode = 0 , greenleaf = 0;
    
    public void visitNode(TreeNode node) {
    	evennode += (node.getDepth() % 2 == 0  || node.getDepth() == 0)? node.getValue() : 0;
    }

    public void visitLeaf(TreeLeaf leaf) {
    	greenleaf += (leaf.getColor() == Color.GREEN)? leaf.getValue() : 0; 
    }
    
}

public class Solution {
    private static int[] values;
    private static Color[] colors;
    private static HashMap<Integer, HashSet<Integer>> map;

    static void createChild (TreeNode pa, int p) {
        HashSet<Integer> cset = map.get(p);
        for (Integer c : cset) {
            HashSet<Integer> gset = map.get(c);
            gset.remove(p);
            if (gset == null || gset.isEmpty()) 
                pa.addChild(new TreeLeaf(values[c], colors[c], pa.getDepth() + 1));
            else {
                TreeNode cnode = new TreeNode(values[c], colors[c], pa.getDepth() + 1);
                pa.addChild(cnode);
                createChild(cnode, c);
            }
        }
    }
  
    public static Tree solve() {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        values = new int[n];
        colors = new Color[n];
        map = new HashMap<Integer, HashSet<Integer>>(n);

        // Two array of values and colors
        for(int i=0; i<n; i++) values[i] = scan.nextInt();
        for(int i=0; i<n; i++) colors[i] = (scan.nextInt() == 0)? Color.RED : Color.GREEN;

        // Build a 2-dimention edges list in map, 1 u has a hashset of v and so does v.
        for(int i=1; i<n; i++) {
            int u = scan.nextInt() - 1;
            int v = scan.nextInt() - 1;
            HashSet<Integer> vset;
            HashSet<Integer> uset;
            if (map.get(u) == null) {
                vset = new HashSet<>();               
                vset.add(v);
                map.put(u, vset);
            }
            else map.get(u).add(v);
            if (map.get(v) == null) {
                uset = new HashSet<>();               
                uset.add(u);
                map.put(v, uset);
            }
            else map.get(v).add(u);           
        }


        Tree root;
        if (n == 1) return new TreeLeaf(values[0], colors[0], 0);
        else {
            root = new TreeNode(values[0], colors[0], 0);
            createChild((TreeNode)root, 0);
        } 


        scan.close();
        return root;
    }


    public static void main(String[] args) {
      	Tree root = solve();
		SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
      	ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
      	FancyVisitor vis3 = new FancyVisitor();

      	root.accept(vis1);
      	root.accept(vis2);
      	root.accept(vis3);

      	int res1 = vis1.getResult();
      	int res2 = vis2.getResult();
      	int res3 = vis3.getResult();

      	System.out.println(res1);
     	System.out.println(res2);
    	System.out.println(res3);
	}
}
